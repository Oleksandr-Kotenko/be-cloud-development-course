service: product-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - Fn::GetAtt: [catalogItemsQueue, Arn]
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        Ref: createProductTopic

  environment:
    ENV_STAGE: ${opt:stage, 'dev'}
    SNS_ARN: !Ref createProductTopic

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    dotenvVars: ${file(configs.js)}

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/createProductSchema.json)}
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-items-queue
        ReceiveMessageWaitTimeSeconds: 20

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: create-product-topic

    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: nitrocat2007@gmail.com
        Protocol: email
        #        FilterPolicy: {
        #          "price": [{"numeric": [">=",200]}],
        #          "title": [{"anything-but": ["Filter Policy Title"]}],
        #        }
        FilterPolicy:
          price:
            - numeric:
                - '>='
                - 200
          title:
            - anything-but:
                - 'Filter Policy Title'
        TopicArn:
          Ref: createProductTopic

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

  Outputs:
    sqsUrl:
      Value: !Ref catalogItemsQueue
    sqsArn:
      Value:
        Fn::GetAtt: [catalogItemsQueue, Arn]
